name: Build and Release DevLog CLI

# Trigger: Manual workflow dispatch only (for maintainers)
on:
  workflow_dispatch:
    inputs:
      release_name:
        description: "Release name (optional - will auto-generate if empty)"
        required: false
        default: ""

jobs:
  build:
    name: Build for ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false # Don't cancel other builds if one fails
      matrix:
        include:
          # macOS builds
          - target: x86_64-apple-darwin
            os: macos-latest
            output_name: devlog-macos-x64
          - target: aarch64-apple-darwin
            os: macos-latest
            output_name: devlog-macos-arm64

          # Linux builds
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            output_name: devlog-linux-x64
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
            output_name: devlog-linux-arm64

          # Windows builds
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            output_name: devlog-windows-x64.exe

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Deno
        uses: denoland/setup-deno@v1
        with:
          deno-version: v2.x # Use latest stable version

      - name: Cache Deno dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/deno
          key: deno-${{ runner.os }}-${{ hashFiles('deno.lock') }}
          restore-keys: |
            deno-${{ runner.os }}-

      - name: Run tests (Windows)
        if: runner.os == 'Windows'
        run: deno test --allow-env=USERPROFILE,HOMEDRIVE,HOMEPATH command/

      - name: Run tests (Unix)
        if: runner.os != 'Windows'
        run: deno test --allow-env=HOME command/

      - name: Build binary (Windows)
        if: runner.os == 'Windows'
        run: deno compile --allow-env=USERPROFILE,HOMEDRIVE,HOMEPATH --allow-write=%USERPROFILE%/.devlog/,.devlog/ --allow-read=%USERPROFILE%/.devlog/,.devlog/ --target ${{ matrix.target }} --output ${{ matrix.output_name }} main.ts

      - name: Build binary (Unix)
        if: runner.os != 'Windows'
        run: deno compile --allow-env=HOME --allow-write=$HOME/.devlog/,.devlog/ --allow-read=$HOME/.devlog/,.devlog/ --target ${{ matrix.target }} --output ${{ matrix.output_name }} main.ts

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.output_name }}
          path: ${{ matrix.output_name }}
          retention-days: 1

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    if: success() # Only run if all builds succeeded
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./binaries

      - name: Display downloaded files
        run: |
          ls -la ./binaries
          find ./binaries -type f -exec ls -la {} \;

      - name: Generate release info
        id: release_info
        run: |
          # Generate release name and tag
          TIMESTAMP=$(date +'%Y%m%d-%H%M%S')
          SHORT_SHA=${GITHUB_SHA:0:7}

          if [ -n "${{ github.event.inputs.release_name }}" ]; then
            RELEASE_NAME="${{ github.event.inputs.release_name }}"
            TAG_NAME="release-${TIMESTAMP}-${SHORT_SHA}"
          else
            RELEASE_NAME="Development Build ${TIMESTAMP}"
            TAG_NAME="dev-${TIMESTAMP}-${SHORT_SHA}"
          fi

          echo "release_name=${RELEASE_NAME}" >> $GITHUB_OUTPUT
          echo "tag_name=${TAG_NAME}" >> $GITHUB_OUTPUT
          echo "timestamp=${TIMESTAMP}" >> $GITHUB_OUTPUT
          echo "short_sha=${SHORT_SHA}" >> $GITHUB_OUTPUT

      - name: Create Release
        run: |
          gh release create ${{ steps.release_info.outputs.tag_name }} \
            --title "${{ steps.release_info.outputs.release_name }}" \
            --notes "$(cat <<'EOF'
          ## Development Build

          **Build Information:**
          - Commit: \`${{ steps.release_info.outputs.short_sha }}\`
          - Built: ${{ steps.release_info.outputs.timestamp }}
          - Triggered by: @${{ github.actor }}

          **Available Platforms:**
          - macOS (Intel x64, Apple Silicon ARM64)
          - Linux (x64, ARM64)
          - Windows (x64)

          **Note:** This is a development build and may contain experimental features or bugs.
          EOF
          )" \
            --prerelease
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Release Assets
        run: |
          # Upload each binary to the release
          for binary_dir in ./binaries/*/; do
            binary_name=$(basename "$binary_dir")
            binary_path=$(find "$binary_dir" -type f | head -1)

            if [ -f "$binary_path" ]; then
              echo "Uploading $binary_name from $binary_path"
              gh release upload ${{ steps.release_info.outputs.tag_name }} "$binary_path"
            else
              echo "Warning: No binary found in $binary_dir"
            fi
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}